// datasource db {
//   provider          = "postgresql"
//   url               = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
// }
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  bio              String?
  location         String?
  portfoliowebsite String?
  reputation       Int?
  joinedAt         DateTime   @default(now())
  image            String?
  role             Role       @default(USER)
  accounts         Account[]
  sessions         Session[]
  questions        Question[]
  answers          Answer[]
  files            File[]
  contacts         Contact[]
  Posts             Posts[] 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Question {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User    @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String
  answers     Answer[]
}

model Answer {
  id          Int       @id @default(autoincrement())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User?      @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String?
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int
}

model File {
  id            Int     @id @default(autoincrement())
  title         String?
  content       String?
  imageUrl      String?
  uploader      User?   @relation(fields: [uploaderEmail], references: [email], onDelete: Cascade)
  uploaderEmail String?
  createdAt   DateTime @default(now())
}
model Contact{
  id Int @id @default(autoincrement())
  messsage String
  sender      User?      @relation(fields: [senderEmail], references: [email], onDelete: Cascade)
  senderEmail String?
  createdAt    DateTime? @default(now())
}
enum Role {
  USER
  ADMIN
}
model Posts {
  id Int @id @default(autoincrement())
  title String
  detail String
  author     User       @relation(fields: [authorEmail], references: [email])
  authorEmail   String
  createdAt   DateTime? @default(now())
} 